import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

function Short() {
    const navigate = useNavigate();
    const [services, setServices] = useState([]); // –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
    const [filteredServices, setFilteredServices] = useState([]); // –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
    const [searchQuery, setSearchQuery] = useState(""); // –§–∞–∫—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
    const [tempSearchQuery, setTempSearchQuery] = useState(""); // –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ–ª–µ –≤–≤–æ–¥—É
    const [phoneNumbers, setPhoneNumbers] = useState([]); // –ù–æ–º–µ—Ä–∏
    const [selectedNumber, setSelectedNumber] = useState(""); // –í–∏–±—Ä–∞–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const [selectedService, setSelectedService] = useState(""); // –í–∏–±—Ä–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
    const [selectedPrice, setSelectedPrice] = useState(""); // –í–∏–±—Ä–∞–Ω–∞ —Ü—ñ–Ω–∞
    const [purchaseStatus, setPurchaseStatus] = useState("");
    const [balance, setBalance] = useState(null);
    const token = localStorage.getItem("token"); // –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    let expireTimer = null;
    const [showNumbers, setShowNumbers] = useState(false); // –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–∫–∞–∑—É
    const [markup, setMarkup] = useState(0);
    
    
        const handleViewNumbers = () => {
            setShowNumbers(true); // –í–∫–ª—é—á–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤
            fetchLongTermMdnData(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–º–µ—Ä–∏
        };

    const fetchMarkup = async () => {
    try {
        console.log("üîç Fetching markup...");
        
        const response = await fetch("http://localhost/admin/markup", {
            method: "GET",
            headers: { Authorization: `Bearer ${token}` },
        });

        if (!response.ok) throw new Error(`Failed to fetch markup: ${response.status}`);

        const data = await response.json();
        console.log("üì© Markup Response:", data);

        if (typeof data.markup !== "number") {
            throw new Error("‚ö†Ô∏è Markup field is missing or invalid.");
        }

        setMarkup(data.markup); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        localStorage.setItem("markup", data.markup); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
    } catch (err) {
        console.error("‚ùå Error fetching markup:", err.message);
        setMarkup(parseFloat(localStorage.getItem("markup")) || 0); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ localStorage
    }
};
    // –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ API
    const expirePhoneNumber = async (phoneNumber) => {
        const token = localStorage.getItem("token");

        console.log("üìå –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω –±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ:", phoneNumber);

        if (!token) {
            console.error("‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏.");
            return;
        }

        try {
            const response = await fetch(`http://localhost/api/phone-numbers/short-term-expire/${phoneNumber}`, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            const data = await response.json();
            console.log("üìå –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞):", data);

            if (!response.ok) {
                throw new Error(data.message || `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–º–µ—Ä (–∫–æ–¥ ${response.status})`);
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –Ω–æ–º–µ—Ä –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            setPhoneNumbers((prevNumbers) => prevNumbers.filter((num) => num.phoneNumber !== phoneNumber));

        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞:", error.message);
        }
    };

    const fetchUserBalance = async () => {
        try {
            const response = await fetch("http://localhost/api/auth/profile", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });
    
            if (!response.ok) {
                throw new Error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å");
            }
    
            const data = await response.json();
            console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–æ –±–∞–ª–∞–Ω—Å:", data.balance);
    
            setBalance(data.balance.toFixed(2)); // –û–∫—Ä—É–≥–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –¥–æ –¥–≤–æ—Ö –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error.message);
            setBalance("N/A"); // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–æ–∫–∞–∑—É—î–º–æ "N/A"
        }
    };
  // –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞
    const buyPhoneNumber = async () => {
        if (!selectedService || !selectedPrice) {
            setPurchaseStatus("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ—é!");
            return;
        }

        const username = localStorage.getItem("username");
        const token = localStorage.getItem("token");

        if (!username || !token) {
            setPurchaseStatus("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å —â–µ —Ä–∞–∑.");
            return;
        }

        const parsedPrice = parseFloat(selectedPrice);
        const finalPrice = (parsedPrice * (1 + markup / 100)).toFixed(2); // –î–æ–¥–∞—î–º–æ –Ω–∞—Ü—ñ–Ω–∫—É

        if (isNaN(finalPrice)) {
            setPurchaseStatus("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
            return;
        }

        try {
            console.log("üìå –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:", JSON.stringify({
                username: username,
                service: selectedService,
                price: finalPrice,
                rentalType: "short_term",
            }));

            const response = await fetch("http://localhost/api/phone-numbers/purchase", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    username: username,
                    service: selectedService,
                    price: finalPrice,
                    rentalType: "short_term",
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫—É–ø–∏—Ç–∏ –Ω–æ–º–µ—Ä (–∫–æ–¥ ${response.status})`);
            }

            console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–∞:", data);
            setPurchaseStatus(`‚úÖ –ö—É–ø–ª–µ–Ω–æ –Ω–æ–º–µ—Ä: ${data.phoneNumber}`);

            // –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
            setPhoneNumbers((prevNumbers) => [
                ...prevNumbers,
                { phoneNumber: data.phoneNumber, serviceName: selectedService, expires_at: "15 —Ö–≤–∏–ª–∏–Ω" }
            ]);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ 15 —Ö–≤–∏–ª–∏–Ω (900000 –º—Å)
            if (expireTimer) clearTimeout(expireTimer);
            expireTimer = setTimeout(() => {
                expirePhoneNumber(data.phoneNumber);
            }, 900000); // 900000 –º—Å = 15 —Ö–≤–∏–ª–∏–Ω

            fetchUserBalance(); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏

        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏:", error.message);
            setPurchaseStatus(error.message);
        }
    };
    const filterServices = (query) => {
        console.log("üìå –£—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø–µ—Ä–µ–¥ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é:", services);
        console.log("üîç –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º:", query);
    
        if (!services || services.length === 0) {
          console.error("‚ùå –ù–µ–º–∞—î —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.");
          setFilteredServices([]); // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫
          return;
        }
    
        const filtered = query
          ? services.filter((service) =>
              service.name.toLowerCase().includes(query.toLowerCase())
            )
          : services;
    
        console.log("‚úÖ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:", filtered);
        setFilteredServices(filtered);
      };
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    const fetchServices = async () => {
        try {
            const response = await fetch("http://localhost/api/proxy/short-term-services", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                throw new Error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            const data = await response.json();

            const shortTermServices = data.message.map((service) => ({
                name: service.name,
                ltr_available: parseInt(service.ltr_available, 10) || 0,
                original_price: parseFloat(service.ltr_price) ? parseFloat(service.ltr_price).toFixed(2) : "N/A",
                ltr_price: parseFloat(service.ltr_price)
                    ? (parseFloat(service.ltr_price) * (1 + markup / 100)).toFixed(2)
                    : "N/A",
            }));
    
            setServices(shortTermServices);
            setFilteredServices(shortTermServices);// –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤:", error);
            setServices([]);
            setFilteredServices([]);
        }
    };
  
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
    const fetchLongTermMdnData = async () => {
        try {
            const response = await fetch("http://localhost/api/phone-numbers/short-term-mdn", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || "Failed to fetch data.");
            }

            const data = await response.json();
            let phoneNumbersArray = Array.isArray(data) ? data : data.message || [];

            const formattedNumbers = phoneNumbersArray.map((num) => ({
                serviceName: num.serviceName || "Unknown",
                phoneNumber: num.phoneNumber || "N/A",
                expires_at: num.expires_at ? new Date(num.expires_at).toLocaleString() : "N/A",
                status: num.status || "Unknown",
                message: "No messages", // –ü–æ—á–∞—Ç–∫–æ–≤–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            }));

            setPhoneNumbers(formattedNumbers);
            setShowNumbers(true); // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –Ω–æ–º–µ—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        } catch (error) {
            console.error("‚ùå Error fetching short-term MDNs:", error.message);
            setPhoneNumbers([]);
        }
    };

    
    
    const fetchSMSMessages = async () => {
        if (!selectedNumber) {
            setPurchaseStatus("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!");
            return;
        }
    
        // ‚ùå –í–ê–ñ–õ–ò–í–û: –°–ö–ê–°–û–í–£–Ñ–ú–û –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–î–ê–õ–ï–ù–ù–Ø
        if (expireTimer) {
            clearTimeout(expireTimer);
            console.log("‚úÖ –¢–∞–π–º–µ—Ä –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ 'Get Message'");
        }
    
        try {
            console.log("üì© –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–º–µ—Ä–∞:", selectedNumber);
    
            const response = await fetch("http://localhost/api/sms/messages", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ phoneNumber: selectedNumber }),
            });
    
            const messages = await response.json();
            console.log("üì© –û—Ç—Ä–∏–º–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", messages);
    
            const latestMessage = messages.length > 0
                ? `${messages[0].sender}: ${messages[0].message}`
                : "No messages";
    
            // –û–Ω–æ–≤–ª—é—î–º–æ state –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            setPhoneNumbers((prevNumbers) =>
                prevNumbers.map((num) =>
                    num.phoneNumber === selectedNumber
                        ? { ...num, message: latestMessage }
                        : num
                )
            );
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:", error.message);
        }
    };
        

  useEffect(() => {
      fetchUserBalance();
      fetchServices();
      fetchMarkup();
  }, []);
  useEffect(() => {
    filterServices(searchQuery);
  }, [searchQuery, services]);
    const handleRowClick = (service) => {
        console.log("üü¢ –í–∏–±—Ä–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å:", service);
        setSelectedService(service.name);
        setSelectedPrice(service.ltr_price);
    };
    const handleNumberClick = (phoneNumber) => {
        console.log("üü¢ –í–∏–±—Ä–∞–Ω–æ –Ω–æ–º–µ—Ä:", phoneNumber);
        setSelectedNumber(phoneNumber); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –Ω–æ–º–µ—Ä —É —Å—Ç–∞–Ω—ñ
    };
     
  return (
    <div className="long-basic-section">
      {/* Header */}
      <header className="long-header">
        <div className="long-logo">
            <span className="icon">
                <img src="/imgs/icon.png" width={"30px"} style={{position: "relative", top: "7px"}}/> Realsimus
            </span>
        </div>
        <h1 className="long-title">SMS Number Rental</h1>
        <button className="long-profile-button"  onClick={() => navigate("/profile")}>üë§ Profile</button>
      </header>

      
      <div className="long-container">
        {/* Balance Section */}
        <div className="long-balance-section">
            <div className="long-flag-container"><img src="/imgs/americflag.png" alt="USA Flag" height={"100px"} width={"175px"} /></div>
            <div className="long-balance-content-title">
                <h2>Short-Term-Rent US mobile numbers</h2>
                <div className="long-balance-content">
                    <div className="long-crypto-img"><img src="/imgs/main1.jpg" alt="USA Flag" height={"150px"} width={"150px"} /></div>
                    <div style={{margin: "5px 20px"}}>
                        <p className="long-balance-text">Balance: <span>${balance !== null ? balance : "Loading..."}</span></p>
                        <div className="long-buttons">
                            <button className="long-crypto-topup-button" onClick={() => navigate("/cryptocurency")}>Cryptocurrency top-up</button>
                            <button className="long-short-term-button" onClick={() => navigate("/long")}>Go to long-term rent</button>
                        </div>
                    </div>
                    <div className="long-crypto-img"><img src="/imgs/main2.jpg" alt="USA Flag" height={"150px"} width={"150px"} /></div>
                </div>
            </div>
            <div className="long-flag-container"><img src="/imgs/americflag.png" alt="USA Flag" height={"100px"} width={"175px"} /></div>
        </div>
        <div className="long-main">
            <div className="long-left">
                {/* Search Section */}
                
                <div className="long-search-section">
                    <div>
                        <label>Service:</label>
                        <input
                            type="text"
                            className="long-service-input"
                            style={{ width: "46%", margin: "0px 5px" }}
                            value={selectedService} // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
                            readOnly // –†–æ–±–∏–º–æ –ø–æ–ª–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É)
                        />
                        <input
                            type="text"
                            className="long-amount-input"
                            style={{ width: "15%", marginRight: "5px" }}
                            value={selectedPrice} // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—Ä–∞–Ω—É —Ü—ñ–Ω—É
                            readOnly
                        />
                        <button className="long-buy-button" onClick={buyPhoneNumber}>Buy!</button>
                    </div>
                    <div>
                        <label>Search:</label>
                        <input type="text" className="long-search-input"  style={{width: "58%", margin: "0px 19px"}}
                        value={tempSearchQuery} // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–ª–µ
                        onChange={(e) => setTempSearchQuery(e.target.value)}
                        />
                        <button className="long-filter-button" onClick={() => setSearchQuery(tempSearchQuery)}>Filter</button>
                    </div>
                    <button className="long-view-rental-button" onClick={handleViewNumbers}>Click to view 30-day rental</button>
                </div>
                {/* Tables */}
                {showNumbers && (
                <div className="long-table-section">
                    <table className="long-service-table">
                        <thead>
                        <tr>
                            <th>Service</th>
                            <th>Amount</th>
                            <th>Price</th>
                        </tr>
                        </thead>
                        <tbody>
                        {filteredServices.length > 0 ? (
                            filteredServices.map((service, index) => (
                                <tr key={index} onClick={() => handleRowClick(service)} style={{ cursor: "pointer" }}>
                                <td>{service.name}</td>
                                <td>{service.ltr_available}</td>
                                <td>${service.ltr_price}</td>
                            </tr>
                            ))
                        ) : (
                            <tr>
                            <td colSpan="3" style={{ textAlign: "center" }}>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤</td>
                            </tr>
                        )}
                        </tbody>
                    </table>
                </div>
                )}

            </div>
            
            <div className="long-right">
                {/* Number Selection */}
                <div className="long-number-selection">
                    <label htmlFor="chooseNumber">Choose a number:</label>
                    <input type="text" className="long-number-input" id="chooseNumber" value={selectedNumber} readOnly/>
                    <button className="long-message-button" onClick={fetchSMSMessages} style={{width: "100%"}}>Get a message! üí¨</button>
                </div>
                {/* Tables */}
                <div className="long-table-section" style={{ maxHeight: "300px", overflowY: "auto", border: "1px solid #ccc" }}>
                    <table className="long-number-table">
                        <thead>
                            <tr>
                                <th>Service</th>
                                <th>Phone Number</th>
                                <th>End Date</th>
                                <th>Status</th>
                                <th>Message</th> {/* –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–æ–ª–æ–Ω–∫—É */}
                            </tr>
                        </thead>
                        <tbody>
                            {phoneNumbers.length > 0 ? (
                                phoneNumbers.map((num, index) => (
                                    <tr key={index} onClick={() => handleNumberClick(num.phoneNumber)} style={{ cursor: "pointer" }}>
                                        <td>{num.serviceName}</td>
                                        <td>{num.phoneNumber}</td>
                                        <td>{new Date(num.expires_at).toLocaleString()}</td>
                                        <td>{!num.status || num.status.trim() === "" ? "offline" : num.status}</td>
                                        <td>{num.message || "No messages"}</td> {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="5" className="long-no-data">No purchased numbers</td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
    
      </div>
      
    </div>
  );
};

export default Short;
