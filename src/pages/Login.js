import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

function Login() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const fetchUserProfile = async () => {
    try {
      const token = localStorage.getItem("token"); // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω
      if (!token) return; // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–º–∞—î, –≤–∏—Ö–æ–¥–∏–º–æ

      const response = await fetch("http://localhost/api/auth/profile", {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", data); // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        localStorage.setItem("email", data.email);
        localStorage.setItem("email", data.username); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ email —É localStorage
      } else {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ email, —Å—Ç–∞—Ç—É—Å:", response.status);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:", error);
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
        const response = await fetch("http://localhost/api/auth/login", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ username, password }),
        });
        const data = await response.json();
        
        if (response.ok) {
            console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–æ–∫–µ–Ω:", data.token);  // –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è

            localStorage.setItem("token", data.token);
            
            // –î–µ–∫–æ–¥—É—î–º–æ JWT-—Ç–æ–∫–µ–Ω
            const decodedToken = JSON.parse(atob(data.token.split(".")[1]));
            console.log("üìå –î–µ–∫–æ–¥–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω:", decodedToken);  // –í–∏–≤–æ–¥–∏–º–æ —É –∫–æ–Ω—Å–æ–ª—å

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            localStorage.setItem("username", decodedToken.sub);

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î `roles`
            if (decodedToken.roles) {
                localStorage.setItem("role", JSON.stringify(decodedToken.roles));
                console.log("üìå –ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–æ–ª—ñ:", decodedToken.roles);
            } else {
                console.error("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–∫–µ–Ω—ñ!");
            }

            await fetchUserProfile();  // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é

            setTimeout(() => {
                navigate("/news");  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
            }, 500);
        } else {
            setError(data.message || "Login failed");
        }
    } catch (error) {
        setError("Server error. Please try again later.");
    }
};


  return (
    <main className="Login">
      <header className="Hero-header">
        <div className="Hero-header-container">
          <div className="Hero-logo">
              <span className="icon">
                <img src="/imgs/icon.png" width={"30px"} style={{position: "relative", top: "7px"}}/> Realsimus
              </span>
          </div>
          <div className="Hero-nav log-nav">
            <div><h1>Login</h1></div>
            <div>
              <button className="Hero-registartion" onClick={() => navigate("/registration")}>Registration</button>
              <button className="Hero-login" onClick={() => navigate("/forgot")}>Forgot Password</button>
            </div>
          </div>
        </div>
      </header>
      <div className="Login-main">
        <div className="login-container">
          <h2 className="login-title">Enter your data</h2>
          <form onSubmit={handleSubmit}>
            <div className="login-input-group">
              <label>Username *</label>
              <input
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                required
              />
            </div>
            <div className="login-input-group">
              <label>Password *</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            {error && <p className="error-message">{error}</p>}
            <button type="submit" className="login-button active">Login!</button>
          </form>
        </div>
      </div>
    </main>
  );
}

export default Login;
